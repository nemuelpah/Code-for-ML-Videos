# -*- coding: utf-8 -*-
"""cobaCIFAR10_saveH5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19iXgHP1zkg4fP6DOlw4doXoXiDgNxmmO

Sama seperti cobaCIFAR10 tetapi dengan proses untuk save model simple dengan h5
"""

import tensorflow as tf
import numpy as np

from tensorflow import keras
from keras.utils import np_utils
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
from keras.models import load_model

import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

train_images, test_images = train_images / 255.0, test_images / 255.0

train_labelsH = np_utils.to_categorical(train_labels)
test_labelsH = np_utils.to_categorical(test_labels)

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

opt = keras.optimizers.Adam(learning_rate=0.001)
model.compile(optimizer=opt,loss="categorical_crossentropy",metrics=['accuracy'])

model.fit(train_images, train_labelsH, epochs=10, batch_size=200, validation_data=(test_images, test_labelsH))

model.save('modelKu.h5')

